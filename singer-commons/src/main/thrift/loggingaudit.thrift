/**
 * Copyright 2019 Pinterest, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace py schemas.loggingaudit
namespace java com.pinterest.singer.loggingaudit.thrift

/**
 *  Common headers added to original thrift message (thrift object) as well as to LogMessage
 *  which is the format ThriftLogger writes data to files.
 *
 *  These common headers together can uniquely identify each log message and provide information
 *  for auditing or tracing use case.
 **/

struct LoggingAuditHeaders {
   /**
    *  Host on which log messages are generated.
    */
   1: required string host;

   /**
    *  LogName is the name of log files where the log messages are written to.  Note that this name
    *  is not necessary the same as the Kafka topic name and each log message could later be
    *  published to multiple topics.
    */
   2: required string logName;

   /**
    *  Process that generate log message.
    */
   3: required i32 pid;

   /**
    *  Timestamp when ThriftLogger instance is initialized.
    */
   4: required i64 session;

   /**
    *  Log sequence number for a given session and it starts with 0.
    */
   5: required i32 logSeqNumInSession;

   /**
    *  Timstamp (millisecond) when the audit header is generated.
    */
   6: required i64 timestamp;
}


/**
 *  Different stages of the pipeline. Audit library (contained in singer-commons) can be potentially
 *  in different stage for auditing purpose while original log messages flow through the pipeline.
 **/

enum LoggingAuditStage {
  THRIFTLOGGER = 0,
  SINGER = 1,
  MERCED = 2,
  MERCED_HR = 3
}


/**
 *  LoggingAuditEvent is generated by the audit library (contained in singer-commons) and sent out
 *  to external storage systems like Kafka Cluster.
 **/

struct LoggingAuditEvent {

   /**
    *  host where the LoggingAuditEvent is generated and sent out from.
   */
   1: required string host;

   /**
    *  one of the logging stage defined in LoggingStage
    */

   2: required LoggingAuditStage stage;

   /**
    *  flag indicates whether current stage is the start of logging auditing. For ThriftLogger stage,
    *  the value is always true. At Singer stage, this field can be true if Singer uploads log files
    *  not generated by ThriftLogger, for example certain server logs in text format. For other
    *  stages, this field is always false.
    */
   3: required bool startAtCurrentStage;

   /**
    *  flag indicates whether current stage is the end of the logging auditing. This field can be
    *  true at Merced / Merced_HR stage.
    */
   4: required bool stopAtCurrentStage;

   /**
    *  loggingAuditHeaders of the audited message is used to uniquely identify the original message.
    */
   5: required LoggingAuditHeaders loggingAuditHeaders;

   /**
    * flag tells whether or not the audited message is valid based on possible validation logic at
    * current stage
    */
   6: optional bool messageValid = true;

   /**
    *  timestamp when the audited message is acknowledged by following system of the pipeline.
    *  default value -1 means one of the following cases:
    *  (1) auditing is ended at current stage (indicated by field 4 of LoggingAuditEvent struct)
    *  (2) acknowledge timestamp cannot be obtained due to configuration or error.
    */
    7: optional i64  messageAcknowledgedTimestamp = -1;


   /**
    *  timestamp when this LoggingAuditEvent is generated.
    */
    8: optional i64 auditEventGeneratedTimestamp;

   /**
    *  name of the kafka cluster which the audited message is read from or written to. This field
    *  is used to differentiate the cases of double or multiple publishing / consuming which could
    *  happend at Singer and Merced Stage. At thrift logger stage, this field is set to the default
    *  value "".
    */

    9: optional string kafkaCluster = "";

   /**
    *  Topic name which the audited message is read from or written to. Together with cluster (
    *  field 9 of LoggingAuditEvent struct), this field is used to differentiate the case of double
    *  or multiple publishing / consuming. At thrift logger stage, this field is set to the default
    *  value "".
    */
    10: optional string topic = "";

   /**
    *  used to bucket audit events into different time window
    */
    11: required i64 headerGeneratedTimestamp;


}

